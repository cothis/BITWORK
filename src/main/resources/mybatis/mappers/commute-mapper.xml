<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="commute">
	<!-- 출근 시간 꺼내오기 -->
	<select id="onTimeToday" parameterType="map" resultType="string">
		SELECT TO_CHAR(ON_TIME, 'hh24:MI:SS') AS ON_TIME
		  FROM COMMUTE
		 WHERE MEMBER_ID = #{memberId} AND C_DATE = #{cDate}
	</select>
	
	<!-- 퇴근 시간 꺼내오기 -->
	<select id="offTimeToday" parameterType="map" resultType="string">
		SELECT TO_CHAR(OFF_TIME, 'hh24:MI:SS') AS OFF_TIME
		  FROM COMMUTE
		 WHERE MEMBER_ID = #{memberId} AND C_DATE = #{cDate}
	</select>
	
	<!-- 이번달 구하는거 -->
	<sql id="thisMonth">
		SELECT COUNT(*)
		  FROM (SELECT *
                  FROM (SELECT *
                          FROM (SELECT TO_CHAR(C_DATE, 'YY/MM') YYMM, MEMBER_ID, STATUS
                                  FROM COMMUTE)
                                 WHERE YYMM LIKE (SELECT TO_CHAR(SYSDATE,'YY/MM')
                                                    FROM DUAL)
                               )
                 WHERE MEMBER_ID = #{memberId})
	</sql>

	<!-- 이번달 출석 일수 집계 -->
	<select id="thisMonth_good" parameterType="string" resultType="int">
		<include refid="thisMonth"/>
         WHERE STATUS = 0
	</select>


	<!-- 이번달 지각 일수 집계 -->
	<select id="thisMonth_late" parameterType="string" resultType="int">
		<include refid="thisMonth"/>
         WHERE STATUS = 1
	</select>
	
	
	<!-- 출근 입력 -->
 	<insert id="inCheck" parameterType="com.bitwork.commute.vo.CommuteVO">
		INSERT INTO COMMUTE (MEMBER_ID, C_DATE, ON_TIME, STATUS)
		VALUES (#{memberId}, #{cDate}, SYSDATE, #{status})
	</insert>
	
	<!-- 퇴근 입력 -->
	<update id="outCheck" parameterType="com.bitwork.commute.vo.CommuteVO">
		UPDATE COMMUTE
           SET OFF_TIME = SYSDATE
         WHERE MEMBER_ID = #{memberId} AND C_DATE = #{cDate}
	</update>

	<select id="getToday" resultType="com.bitwork.commute.vo.CommuteVO" parameterType="com.bitwork.member.vo.MemberVO">
		SELECT C.MEMBER_ID,
			   TO_CHAR(C_DATE, 'YY/MM/DD')     AS C_DATE,
			   TO_CHAR(ON_TIME, 'HH24:MI:SS')  AS ON_TIME,
			   TO_CHAR(OFF_TIME, 'HH24:MI:SS') AS OFF_TIME,
			   STATUS,
			   GOOD,
			   LATE,
			   TOTAL
		FROM COMMUTE C
				 INNER JOIN
			 (
				 SELECT COUNT(DECODE(STATUS, 0, '정상')) AS GOOD,
						COUNT(DECODE(STATUS, 1, '지각')) AS LATE,
						COUNT(MEMBER_ID)               as TOTAL,
						MEMBER_ID
				 FROM COMMUTE
				 WHERE TO_CHAR(C_DATE, 'YY/MM') = TO_CHAR(SYSDATE, 'YY/MM')
				   and MEMBER_ID = #{id}
				 GROUP BY MEMBER_ID
			 ) S ON C.MEMBER_ID = S.MEMBER_ID
		WHERE C_DATE = TO_CHAR(SYSDATE, 'YYYY/MM/DD')
		UNION
		SELECT C.MEMBER_ID,
			   TO_CHAR(SYSDATE, 'YY/MM/DD') AS C_DATE,
			   '00:00:00'                   AS ON_TIME,
			   '00:00:00'                   AS OFF_TIME,
			   0                            as STATUS,
			   GOOD,
			   LATE,
			   TOTAL
		FROM COMMUTE C
				 INNER JOIN
			 (
				 SELECT COUNT(DECODE(STATUS, 0, '정상')) AS GOOD,
						COUNT(DECODE(STATUS, 1, '지각')) AS LATE,
						COUNT(MEMBER_ID)               as TOTAL,
						MEMBER_ID
				 FROM COMMUTE
				 WHERE TO_CHAR(C_DATE, 'YY/MM') = TO_CHAR(SYSDATE, 'YY/MM')
				   and MEMBER_ID = #{id}
				 GROUP BY MEMBER_ID
			 ) S ON C.MEMBER_ID = S.MEMBER_ID
		WHERE rownum = 1
		  and not exists(
				SELECT C.MEMBER_ID,
					   TO_CHAR(C_DATE, 'YY/MM/DD')     AS C_DATE,
					   TO_CHAR(ON_TIME, 'HH24:MI:SS')  AS ON_TIME,
					   TO_CHAR(OFF_TIME, 'HH24:MI:SS') AS OFF_TIME,
					   STATUS,
					   GOOD,
					   LATE,
					   TOTAL
				FROM COMMUTE C
						 INNER JOIN
					 (
						 SELECT COUNT(DECODE(STATUS, 0, '정상')) AS GOOD,
								COUNT(DECODE(STATUS, 1, '지각')) AS LATE,
								COUNT(MEMBER_ID)               as TOTAL,
								MEMBER_ID
						 FROM COMMUTE
						 WHERE TO_CHAR(C_DATE, 'YY/MM') = TO_CHAR(SYSDATE, 'YY/MM')
						   and MEMBER_ID = #{id}
						 GROUP BY MEMBER_ID
					 ) S ON C.MEMBER_ID = S.MEMBER_ID
				WHERE C_DATE = TO_CHAR(SYSDATE, 'YYYY/MM/DD')
			)
	</select>
	
	<!-- =============== 리스트 ================== -->

	
	<!-- 기간별 출퇴근 기록 뽑기 -->
	<select id="list" resultType="com.bitwork.commute.vo.CommuteVO" parameterType="map">
		SELECT * FROM 
		(
			SELECT ROW_NUMBER() over (ORDER BY C_DATE DESC) as RN, TO_CHAR(C_DATE, 'YY/MM/DD') AS C_DATE, TO_CHAR(ON_TIME, 'hh24:mm:SS') AS ON_TIME, TO_CHAR(OFF_TIME, 'hh24:mm:SS') AS OFF_TIME, STATUS
			  FROM COMMUTE
			 WHERE MEMBER_ID = #{memberId}
			   AND C_DATE BETWEEN #{startDay} AND #{endDay}
	   )
	   WHERE RN BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="totalCount" resultType="int" parameterType="map">
		SELECT COUNT(MEMBER_ID)
		FROM COMMUTE
		WHERE MEMBER_ID = #{memberId}
	      AND C_DATE BETWEEN #{startDay} AND #{endDay}
	</select>
	

</mapper>